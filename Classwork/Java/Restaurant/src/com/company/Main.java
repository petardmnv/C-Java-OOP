package com.company;

import java.util.HashMap;
import java.util.Map;

public class Main {

    public static void main(String[] args) {
	// write your code here

        Product cheese = new Product("Cheese", Unit.KG, 1.4);
        Product tomatoes = new Product("Tomatoes", Unit.KG, 0.4);
        Product porkMeat = new Product("PorkMeat", Unit.KG, 2.2);
        Product salomon = new Product("Salomon", Unit.KG, 13.4);

        Map<Product, Integer> products = new HashMap<>();
        products.put(cheese, 10);
        products.put(tomatoes, 50);
        products.put(porkMeat, 20);
        products.put(salomon, 7);

        Storage storage = new Storage(products);

        Dish dish = new Dish("bulamach", products, 120);


        /*
        Да се напише програма ресторант.
В ресторанта има склад и в него има наличност с продукти.
В ресторанта се готвят определен набор от ястия.
Има поръчки, които съдържат различни ястия с различни количества.
Ястията се готвят от готвачи. За приготвянето на всяко ястие се изисква време. Докато готвят едно ястие, готвачите не могат да готвят друго.
След като всички ястия за една поръчка са готови, сервитьор завършва поръчката.
Product:
name - име на продукта
unit - мерна единица (пример: литър, грам, килограм и т.н.)
price - цена за единица от мерната единица
Storage:
products - колекция с наличните продукти и техните количества
addProduct(Product, amount) - добавя продукт с подаденото количество, ако вече има такъв продукт, увеличава наличността.
getProduct(Product, amount) - изважда подаденото количество от наличността на посочения продукт. Ако няма наличност, хвърля грешка
Order:
id -  цяло число, уникално
dishes - колекция с имената на поръчани ястия и съответното количество
Dish:
name - има на ястието
products - колекция с продукти необходими за приготвяне на рецептата и съответните количества
timeToCook - време за приготвяне на ястието (в секунди)
getSalePrice() - метод връщащ продажната цена на ястието. 2 * на цената на необходимите продукти.
Restaurant:
dishes - колекция с предлагани ястия
chefs - колекция с готвачи
waiters - колекция със сервитьори
storage - склад на ресторанта
money - текущия баланс на ресторанта.
activeOrders - колекция с всички активни поръчки
completedOrders - колекция с всички завършени поръчки
failedOrders - колекция с провалени поръчки
addOrder -  добавя активна поръчка. Проверява за валидни стойности. Връща грешка ако нещо не е наред.
completeOrder(int id) - премахва активна поръчка и я добавя в завършени поръчки
addChef(Chef) - добавя готвач към наличните в ресторанта
addWaiter(Waiter) - добавя сервитьор в ресторанта
Chef:
name
Waiter:
name
Технически детайли:
Готвачите и сервитьорите са нишки.
Готвачите:
проверяват дали има активни поръчки и ако има, взимат една и започват да я приготвят. Времето за приготвяне зависи от ястията в поръчката.
за приготвянето на дадено ястие, те трябва да използват продукти от наличните в склада. Ако няма налични продукти за някое ястие, цялата поръчка се проваля. Трябва да хвърли грешка, но тя да не прекратява цялото изпълнение на програмата
Сервитьорите:
проверяват дали всички ястия за дадена поръчка са сготвени. Ако са сготвени, те завършват поръчката като извикват метода в ресторанта.

Моетодите посочени в условието е задължително да се имплементират и използват.
Може да добавяте допълнителни класове и методи за каквото ви е нужно.
Бонус:
Една поръчка да се готви от няколко готвача едновременно. Тоест всеки готвач може да готви ястие от дадена поръчка.

Да се напишат unit тестове.
Да се направи демонстрация в main.

        */
    }
}
